# Multi-stage build for production
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Install pnpm and dependencies
RUN npm install -g pnpm@latest && \
    pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build application
RUN pnpm prisma generate && \
    pnpm build:client && \
    pnpm build:server

# Production stage
FROM node:20-alpine

# Install runtime dependencies
RUN apk add --no-cache \
    sqlite \
    curl \
    ca-certificates && \
    npm install -g pnpm@latest

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy prisma schema first
COPY prisma ./prisma

# Install production dependencies only (ignore scripts to avoid husky issues)
RUN pnpm install --prod --frozen-lockfile --ignore-scripts

# Generate Prisma client in production stage
RUN npx prisma generate

# Copy built files from builder
COPY --from=builder /app/dist ./dist

# Create necessary directories
RUN mkdir -p /data /app/logs && \
    chown -R node:node /app /data

# Switch to non-root user
USER node

# Expose port
EXPOSE 9011

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:9011/health || exit 1

# Start application
CMD ["node", "dist/server/index.js"]
